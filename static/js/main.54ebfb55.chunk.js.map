{"version":3,"sources":["Horoscope.js","Signs.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Horoscope","props","state","json","URL","this","sign","day","fetch","method","then","response","setState","horoscope","className","date_range","current_date","description","mood","color","lucky_number","Component","Signs","signsDiv","map","index","RendHoroscope","useParams","console","log","undefined","alt","src","toLowerCase","id","to","Header","path","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uTAqCeA,G,wDAlCX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAM,IAHI,E,gEAOI,IAAD,OACXC,EAAG,kDAA8CC,KAAKJ,MAAMK,KAAzD,gBAAqED,KAAKJ,MAAMM,KACzFC,MAAMJ,EAAK,CACPK,OAAQ,SACTC,MAAK,SAAAC,GAAQ,OAAIA,EAASR,UAC5BO,MAAK,SAAAP,GAAU,EAAKS,SAAS,CAACT,c,+BAI/B,IAAMU,EAAYR,KAAKH,MAAMC,KAC7B,OACI,yBAAKW,UAAU,eACX,4BAAKD,EAAUE,YACf,qCAAWF,EAAUG,cACrB,2BAAIH,EAAUI,aACd,2BACI,+BACI,uCAAaJ,EAAUK,KAAvB,MACA,wCAAcL,EAAUM,MAAxB,MACA,+CAAqBN,EAAUO,qB,GA3B/BC,cCiDTC,E,uKA3Cb,IAIMC,EAJQ,CAAC,QAAS,SAAU,SAAU,SAAU,MAAO,QAAS,QAAS,UAAW,cAAe,YAAa,WAAY,UAI3GC,KAAI,SAAClB,EAAMmB,GAEjC,IAAMC,EAAgB,WAAO,IACtBnB,EAAQoB,cAARpB,IAEN,OADAqB,QAAQC,IAAItB,QACAuB,IAARvB,EAEF,kBAAC,EAAD,CAAWD,KAAMA,EAAMC,IAAKA,IAI5B,kBAAC,EAAD,CAAWD,KAAMA,EAAMC,IAAI,WAI9B,OACC,yBAAKO,UAAU,QACd,yBAAKA,UAAU,mBAAmBiB,IAAI,OAAOC,IAAG,oDAA+C1B,EAAK2B,cAApD,UAChD,wBAAInB,UAAU,eAAeR,GAC7B,kBAACoB,EAAD,UAKH,OACC,6BACC,yBAAKQ,GAAG,WAAWpB,UAAU,cAC5B,kBAAC,IAAD,CAAMqB,GAAG,6BAA6BrB,UAAU,qBAAhD,aACA,kBAAC,IAAD,CAAMqB,GAAG,oBAAoBrB,UAAU,qBAAvC,SACA,kBAAC,IAAD,CAAMqB,GAAG,4BAA4BrB,UAAU,qBAA/C,aAED,yBAAKoB,GAAG,SACNX,Q,GAtCcF,aC4BLe,E,uKAvBP,OACI,kBAAC,IAAD,KACI,4BAAQF,GAAG,aAAapB,UAAU,0CAC9B,yBAAKA,UAAU,mBACX,wBAAIoB,GAAG,QAAO,yBAAKA,GAAG,WAAWH,IAAI,OAAOC,IAAI,gEAAgE,kBAAC,IAAD,CAAMG,GAAG,qBAAT,oBAGxH,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOE,KAAK,yBACR,6BACI,kBAAC,EAAD,QAGR,kBAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,qBACd,6BACI,kBAAC,EAAD,c,GAjBPhB,aCMNkB,E,uKARX,OACE,yBAAKzB,UAAU,mBACb,kBAAC,EAAD,W,GAJUO,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.54ebfb55.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Horoscope extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            json: {}\n        }\n    }\n\n    componentDidMount () {\n        const URL = `https://aztro.sameerkumar.website/?sign=${this.props.sign}&day=${this.props.day}`;\n        fetch(URL, {\n            method: 'POST'\n        }).then(response => response.json())\n        .then(json => { this.setState({json}); });\n    }\n\n    render(){\n        const horoscope = this.state.json\n        return(\n            <div className=\"text-center\">\n                <h6>{horoscope.date_range}</h6>\n                <h6>Date: {horoscope.current_date}</h6>\n                <p>{horoscope.description}</p>\n                <p>\n                    <small>\n                        <span>Mood: {horoscope.mood}, </span>\n                        <span>Color: {horoscope.color}, </span>\n                        <span>Lucky number: {horoscope.lucky_number}</span>\n                    </small>\n                </p>\n            </div>\n        )\n    }\n}\n\nexport default Horoscope","import React, {Component} from 'react';\nimport './Signs.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Horoscope from './Horoscope'\nimport { Link, useParams } from 'react-router-dom';\n\nclass Signs extends Component {\n\trender(){\n\t\tconst signs = [\"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\", \"Libra\", \"Scorpio\", \"Sagittarius\", \"Capricorn\", \"Aquarius\", \"Pisces\"]\n\n\n\n\t\tconst signsDiv = signs.map((sign, index) => {\n\n\t\t\tconst RendHoroscope = () => {\n\t\t\t\tlet { day } = useParams();\n\t\t\t\tconsole.log(day)\n\t\t\t\tif (day !== undefined){\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<Horoscope sign={sign} day={day} />\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\treturn(\n\t\t\t\t\t\t<Horoscope sign={sign} day=\"today\" />\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (\n\t\t\t\t<div className=\"sign\">\n\t\t\t\t\t<img className=\"sign-img mx-auto\" alt=\"sign\" src={`https://www.horoscope.com/images-US/signs/${sign.toLowerCase()}.png`} />\n\t\t\t\t\t<h2 className=\"text-center\">{sign}</h2>\n\t\t\t\t\t<RendHoroscope  />\n\t\t\t\t</div>\n\t\t\t)\n\t\t})\n\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<nav id=\"days-nav\" className=\"nav navbar\">\n\t\t\t\t\t<Link to=\"/Horoscope-React/yesterday\" className=\"nav-item nav-link\">Yesterday</Link>\n\t\t\t\t\t<Link to=\"/Horoscope-React/\" className=\"nav-item nav-link\">Today</Link>\n\t\t\t\t\t<Link to=\"/Horoscope-React/tomorrow\" className=\"nav-item nav-item\">Tomorrow</Link>\n\t\t\t\t</nav>\n\t\t\t\t<div id=\"signs\">\n\t\t\t\t\t{signsDiv}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Signs;","import React, { Component } from 'react'\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n\tLink\n  } from \"react-router-dom\";\n  import Signs from './Signs'\n\nclass Header extends Component {\n    render(){\n        return(\n            <Router>\n                <header id=\"header-nav\" className=\"navbar navbar-fixed-top navbar-inverse\">\n                    <div className=\"container-fluid\">\n                        <h1 id=\"logo\"><img id=\"logo-img\" alt=\"Logo\" src=\"https://www.bergerpaints.com/resources/images/signwheel.png\" /><Link to=\"/Horoscope-React/\">Horoscope App</Link></h1>\n                    </div>\n                </header>\n                <Switch>\n                    <Route path=\"/Horoscope-React/:day\">\n                        <div>\n                            <Signs/>\n                        </div>\n                    </Route>\n                    <Route exact path=\"/Horoscope-React/\">\n                        <div>\n                            <Signs/>\n                        </div>\n                    </Route>\n                </Switch>\n            </Router>          \n            )\n    }\n}\nexport default Header","import React, {Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './Header'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Header />\n      </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}